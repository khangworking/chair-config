/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/chair.gltf -o ./components/ 
*/

import React from "react";
import { useGLTF, useTexture } from "@react-three/drei";

import * as THREE from "three";
import { useCustomization } from "../contexts/CustomizationContext";

const Chair = (props) => {
  const leatherProps = useTexture({
    // map: "./textures/leather/Leather_008_Base Color.jpg",
    normalMap: "./textures/leather/Leather_008_Normal.jpg",
    roughnessMap: "./textures/leather/Leather_008_Roughness.jpg",
    aoMap: "./textures/leather/Leather_008_Ambient Occlusion.jpg",
  });
  // leatherProps.map.repeat.set(3, 3);
  leatherProps.normalMap.repeat.set(3, 3);
  leatherProps.roughnessMap.repeat.set(3, 3);
  leatherProps.aoMap.repeat.set(3, 3);
  // leatherProps.map.wrapS =
  //   leatherProps.map.wrapT =
  leatherProps.normalMap.wrapS =
    leatherProps.normalMap.wrapT =
    leatherProps.roughnessMap.wrapS =
    leatherProps.roughnessMap.wrapT =
    leatherProps.aoMap.wrapS =
    leatherProps.aoMap.wrapT =
      THREE.RepeatWrapping;

  const fabricProps = useTexture({
    // map: "./textures/fabric/Fabric_Knitted_006_basecolor.jpg",
    normalMap: "./textures/fabric/Fabric_Knitted_006_normal.jpg",
    roughnessMap: "./textures/fabric/Fabric_Knitted_006_roughness.jpg",
    aoMap: "./textures/fabric/Fabric_Knitted_006_ambientOcclusion.jpg",
  });
  // fabricProps.map.repeat.set(3, 3);
  fabricProps.normalMap.repeat.set(3, 3);
  fabricProps.roughnessMap.repeat.set(3, 3);
  fabricProps.aoMap.repeat.set(3, 3);
  // fabricProps.map.wrapS =
  //   fabricProps.map.wrapT =
  fabricProps.normalMap.wrapS =
    fabricProps.normalMap.wrapT =
    fabricProps.roughnessMap.wrapS =
    fabricProps.roughnessMap.wrapT =
    fabricProps.aoMap.wrapS =
    fabricProps.aoMap.wrapT =
      THREE.RepeatWrapping;

  const { nodes, materials } = useGLTF("/models/chair.gltf");

  const { material, legs, chairColor, cushionColor } = useCustomization();
  let meshStandardMaterialProps =
    material === "leather" ? leatherProps : fabricProps;

  console.log("chairColor", chairColor);

  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.Chair.geometry} material={materials.Chair}>
        <meshStandardMaterial
          {...meshStandardMaterialProps}
          color={chairColor}
        />
      </mesh>
      <mesh
        geometry={nodes.Cushion.geometry}
        material={materials.Cushion}
        position={[0, 0.064, 0.045]}
      >
        <meshStandardMaterial {...fabricProps} color={cushionColor} />
      </mesh>
      <mesh
        geometry={nodes.Legs1.geometry}
        material={materials.Legs}
        visible={legs === "Leg1"}
      />
      <mesh
        geometry={nodes.Legs2.geometry}
        material={materials.Legs}
        visible={legs === "Leg2"}
      />
    </group>
  );
};

useGLTF.preload("/chair.gltf");

export default Chair;
